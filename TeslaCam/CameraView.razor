@inject IJSRuntime JS

<div class="camera-view @(Mini ? "mini" : "")">
    <video @ref="videoElement" class="video-player" @onended="OnVideoEnded"></video>
    @if (Mini)
    {
        <div class="camera-name">@CameraName</div>
    }
</div>

@code {
    private ElementReference videoElement;
    private LinkedListNode<CamClipChunk> _currentChunk;

    [Parameter]
    public CamClip CamClip { get; set; }

    [Parameter]
    public string CameraPath { get; set; }

    [Parameter]
    public string CameraName { get; set; }

    [Parameter]
    public bool Mini { get; set; }

    [Parameter]
    public EventCallback FileStarted { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (CamClip != null)
        {
            _currentChunk = CamClip.Chunks.First;
            await PlayCurrentChunkAsync();
        }
    }

    private async Task PlayCurrentChunkAsync()
    {
        if (_currentChunk?.Value == null)
            return;

        var camFile = _currentChunk.Value.Files.GetValueOrDefault(CameraPath);
        if (camFile == null)
            return;

        await JS.InvokeVoidAsync("setVideoSource", videoElement, camFile.FilePath);
        await JS.InvokeVoidAsync("playVideo", videoElement);

        await FileStarted.InvokeAsync();
    }

    private async Task OnVideoEnded()
    {
        if (_currentChunk.Next == null)
            return;

        _currentChunk = _currentChunk.Next;
        await PlayCurrentChunkAsync();
    }
}
